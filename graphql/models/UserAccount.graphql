type UserAccount {
    id: ID!
    value: Float!
    created_at: DateTime!
    updated_at: DateTime!
    #Relations
    user: User! @belongsTo
    currency: Currency! @belongsTo
}

input createUserAccountInput {
    user_id: ID!
    currency_id: ID!
}

input topUpUserAccount {
    id: ID!
    value: Float!
}

extend type Query {
    userAccount(id: ID! @eq): UserAccount
        @find
        @guard(with: ["api"])
        @can(
            ability: "graphql"
            injectArgs: "true"
            args: {
                queryByModel: "UserAccount"
                idArg: "id"
            }
        )

    userAccounts(
        user_id: ID! @where(operator: "=")
    ): [UserAccount!]!
        @guard(with: ["api"])
        @paginate(defaultCount: 10)
        @can(
            ability: "graphql"
            injectArgs: "true"
            args: {
                queryByModel: "User"
                idArg: "user_id"
            }
        )
}

extend type Mutation {
    createUserAccount(input: createUserAccountInput @spread): UserAccount
        @create
        @guard(with: ["api"])
        @can(
            ability: "graphql"
            injectArgs: "true"
            args: {
                queryByModel: "User"
                idArg: "user_id"
            }
        )

    topUpUserAccount(input: topUpUserAccount @spread): UserAccount
        @guard(with: ["api"])
        @can(
            ability: "graphql"
            injectArgs: "true"
            args: {
                queryByModel: "UserAccount"
                idArg: "id"
            }
        )
        @validator(class: "App\\GraphQL\\Validators\\TopUpUserAccountValidator")
}
